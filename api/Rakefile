require File.expand_path('../config/application', __FILE__)
require 'csv'
Rails.application.load_tasks

namespace :db do
  desc "remove leading backticks"
  task :barcode_fix => :environment do
    old_barcodes = Barcode.where('barcode LIKE ?', "'%")
    puts "#{old_barcodes.length} Barcodes found"
    abort("There are no barcodes that need fixing") if old_barcodes.empty?
    old_barcodes.each{ | barcode |
      new_barcode = barcode.barcode[1..-1]
      Barcode::Updater.update(barcode: new_barcode, id: barcode.id)
    }
    puts "#{old_barcodes.length} Barcodes fixed"
  end

  desc "Remaps old_barcode -> new_barcode for a given sku"
  task :remap_barcode, [:sku, :old_barcode, :new_barcode] => :environment do |t, args|
    sku, old_barcode, new_barcode = args.values_at(:sku, :old_barcode, :new_barcode)

    abort("No barcodes provided") unless old_barcode.present? && new_barcode.present?
    abort("The barcodes are the same") if old_barcode == new_barcode

    sku_exists = Sku.where(sku: sku).exists?
    sku_id = Sku.where(sku: sku).pluck(:id)
    old_barcode_id = Barcode.find_by(barcode: old_barcode).id
    new_barcode_exists = Barcode.where(barcode: new_barcode).exists?
    old_barcode_exists = Barcode.where(barcode: old_barcode).exists?
    sku_has_old_barcode = Barcode.where(sku_id: sku_id, barcode: old_barcode).exists?

    abort("Sku doesn't exist") unless sku_exists
    abort("new_barcode already exists") if new_barcode_exists
    abort("old_barcode doesn't exist") unless old_barcode_exists
    abort("No barcode with that sku found") unless sku_has_old_barcode

    Barcode::Updater.update(barcode: new_barcode, id: old_barcode_id)
  end

  desc "Takes a CSV file as input to run db:remap_barcode. Don't put in dup values."
  task :remap_barcode_csv, [:csv_file] => :environment do |t, args|
    csv_file = args[:csv_file]
    CSV.open(File.expand_path(csv_file)) do | rows |
      rows.each do | row |
        begin
          Rake::Task["db:remap_barcode"].reenable
          Rake::Task["db:remap_barcode"].invoke(row[0].to_s,row[1].to_s,row[2].to_s)
        rescue SystemExit
          puts "#{row} failed"
        end
      end
    end
  end
end

namespace :order_fix do
  desc "Checks for and deletes skus and orders that are missing data"
  task "delete_problem_data", [:OT_number] => :environment do |t, args|
    ot_number = args[:OT_number]
    abort("No order tool id number given") unless ot_number
    skus = Sku.po_by_operator(ot_number)
    abort("There were no skus found") if skus.count < 1
    skus.each(&:destroy)
    orders = Order.order_by_ot_number(ot_number)
    order_line_items = OrderLineItem.by_ot_number(ot_number)
    order_line_items.each(&:destroy) if (order_line_items.length > 0)
    orders.each(&:destroy) if (orders.length > 0)
    po_numbers = PurchaseOrderLineItem.po_by_operator(ot_number)
    po_numbers.each { | po_number | puts po_number }
  end

  desc "Deletes an old po, but keeps the po number and puts it onto a different given po."
  task "remap_po", [:po_number_being_kept, :po_number_being_changed] => :environment do |t, args|
    po1 = args[:po_number_being_kept]
    po2 = args[:po_number_being_changed]
    abort("We need the POs") unless po1 && po2
    abort("The POs are the same") if po1 == po2
    PurchaseOrderLineItem.by_po_number(po1).each(&:destroy)
    PurchaseOrderLineItem.move_old_po_number_across(po1, po2)
    PurchaseOrder.destroy_all(po_num: po2)
  end
end

