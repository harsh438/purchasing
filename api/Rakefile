require File.expand_path('../config/application', __FILE__)

require "./app/models/barcode"

Rails.application.load_tasks

namespace :db do
  desc "remove leading backticks"
  task "barcode_fix" => :environment do
    puts "Checking for barcodes that need fixing"
    data = Barcode.where("barcode LIKE ?", "'%")
    array = data.map do |row|
      row[:sku_id]
    end
    if array.length > 0
      puts "Updating #{array.length} barcodes in barcodes table in Wavehouse"
      sku_id_list = array.join(',')
      ActiveRecord::Base.connection.execute(
        "update
        barcodes
        set
        barcode = substring(barcode, 2, length(barcode)-1),
        updated_at = now()
        where
        sku_id in (#{sku_id_list})"
      )
      puts "Touching affected SKUs in the skus table"
      ActiveRecord::Base.connection.execute(
        "update
        skus
        set
        updated_at = now()
        where id in (#{sku_id_list})"
      )
      res = ActiveRecord::Base.connection.execute(
        "SELECT ROW_COUNT()"
      )
      puts "#{res.first} skus updated"
      puts "Finished with no errors" if array.length == res.first
      puts "There were #{array.length - res.first[0]} errors"
    else
      puts "There are no barcodes that need fixing"
    end
  end
end

namespace :order_fix do
  desc "Checks for and deletes skus and orders that are missing data"
  task "delete_problem_data", [:OT_number] => :environment do |t, args|
    ot_number = args[:OT_number]
    abort("No order tool id number given :( ") unless ot_number
    puts "----------------------------------------"
    puts "|   Checking for skus that need fixing |"
    puts "----------------------------------------"
    puts
    skus = ActiveRecord::Base.connection.execute(
      "select sku from purchase_orders p
      join
      skus s on p.sku_id= s.id
      where
      operator = \"OT_#{ot_number}\""
    )
    abort("There were no skus found") if skus.count < 1
    puts " \"#{skus.count}\" SKUs found"
    puts
    puts "----------------------------------------"
    puts "|          Deleting skus               |"
    puts "----------------------------------------"
    # deleted_skus = ActiveRecord::Base.connection.execute(
    #   "delete s from purchase_orders p
    #   join
    #   skus s on p.sku_id= s.id
    #   where
    #   operator = \"OT_#{ot_number}\""
    # )
    # puts
    # puts "#{deleted_skus.count} SKUs deleted"
    puts
    puts "---------------------------------------------------"
    puts "| Checking if any orders have already been placed |"
    puts "---------------------------------------------------"
    puts
    orders = ActiveRecord::Base.connection.execute(
      "select sku_id from orders o
      join
      order_line_items ol on o.id= ol.order_id
      where
      name like \"%OT_#{ot_number}%\"
      group by sku_id"
    )
    if (orders.count > 1)
      puts "#{orders.count} orders found"
      puts "Deleting them now"
        # ActiveRecord::Base.connection.execute(
        #   # check this query
        #   "delete ol, o from orders o
        #   join
        #   order_line_items ol on o.id= ol.order_id
        #   where
        #   name like \"%OT_#{ot_number}%\" "
        # )
    else
      puts "No orders to worry about"
    end
    puts
    puts "-----------------------------------------"
    puts "              PO Numbers"
    puts "-----------------------------------------"
    puts
    puts "These are the PO numbers we need to re-map:"
    po_numbers = ActiveRecord::Base.connection.execute(
      "select po_number, drop_date,count(*) from
      purchase_orders
      where
      operator = \"OT_#{ot_number}\"
      group by po_number"
    )
    puts "-------------------------"
    puts "| po_number | drop_date  |"
    puts "-------------------------"
    info = []
    po_numbers.each{ |ponumb|
      p "| #{ponumb[0]}    |  #{ponumb[1]} |"
      puts "-------------------------"
      info << ponumb[0]
      info << ponumb[1]
    }
    puts "Po data copied to clipboard:"
    sh "echo #{info} | pbcopy"
  end


  desc "Deletes an old po, but keeps the po number and puts it onto a different given po."
  task "remap_po", [:old_po, :new_po] => :environment do |t, args|
    po1 = args[:old_po]
    po2 = args[:new_po]
    abort("We need the POs") unless po1 && po2
    abort("The POs are the same") unless po1 != po2
    puts "Deleting old PO"
    ActiveRecord::Base.connection.execute(
      "delete from purchase_orders where po_number=#{po1}"
    )
    ActiveRecord::Base.connection.execute(
      "update
      purchase_orders
      set
      po_number =#{po1}
      where po_number =#{po2}"
    )
    puts "Updating the PO"
    ActiveRecord::Base.connection.execute(
      "update
      purchase_orders
      set
      po_number =#{po1}
      where po_number =#{po2}"
    )
    puts "Cleaning up old po from po_summary"
    ActiveRecord::Base.connection.execute(
      "delete from purchase_orders where po_number"
    )
  end
end

