require File.expand_path('../config/application', __FILE__)

require "./app/models/barcode"

Rails.application.load_tasks

namespace :db do
  desc "remove leading backticks"
  task "barcode_fix" => :environment do
    puts "Checking for barcodes that need fixing"
    data = Barcode.where("barcode LIKE ?", "'%")
    array = data.map do |row|
      row[:sku_id]
    end
    if array.length > 0
      puts "Updating #{array.length} barcodes in barcodes table in Wavehouse"
      sku_id_list = array.join(',')
      ActiveRecord::Base.connection.execute(
        "update
        barcodes
        set
        barcode = substring(barcode, 2, length(barcode)-1),
        updated_at = now()
        where
        sku_id in (#{sku_id_list})"
      )
      puts "Touching affected SKUs in the skus table"
      ActiveRecord::Base.connection.execute(
        "update
        skus
        set
        updated_at = now()
        where id in (#{sku_id_list})"
      )
      res = ActiveRecord::Base.connection.execute(
        "SELECT ROW_COUNT()"
      )
      puts "#{res.first} skus updated"
      puts "Finished with no errors" if array.length == res.first
      puts "There were #{array.length - res.first[0]} errors"
    else
      puts "There are no barcodes that need fixing"
    end
  end
end

namespace :order_fix do
  desc "Checks for and deletes skus and orders that are missing data"
  task "delete_problem_data", [:OT_number] => :environment do |t, args|
    ot_number = args[:OT_number]
    abort("No order tool id number given") unless ot_number
    skus = PurchaseOrderLineItem.skus_by_operator(ot_number)
    abort("There were no skus found") if skus.count < 1
    skus.each(&:destroy)
    orders = OrderLineItem.order_by_ot_number(ot_number)
    orders.each(&:destroy) if (orders.length > 1)
    po_numbers = PurchaseOrderLineItem.po_by_operator(ot_number)
    po_numbers.each { | po_number | puts po_number }
  end


  desc "Deletes an old po, but keeps the po number and puts it onto a different given po."
  task "remap_po", [:po_number_being_kept, :po_number_being_changed] => :environment do |t, args|
    po1 = args[:po_number_being_kept]
    po2 = args[:po_number_being_changed]
    abort("We need the POs") unless po1 && po2
    abort("The POs are the same") unless po1 != po2
    PurchaseOrderLineItem.by_po_number(po1).each(&:destroy)
    PurchaseOrderLineItem.move_old_po_number_across(po1, po2)
    PurchaseOrder.destroy_all(:po_num po2)
  end
end

