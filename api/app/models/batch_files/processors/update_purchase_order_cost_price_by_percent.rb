module BatchFiles
  module Processors
    class UpdatePurchaseOrderCostPriceByPercent < BatchFiles::Processors::Base
      HEADERS = %w(po discount).freeze
      DESCRIPTION = 'generated by discount-by-percent batch file'.freeze

      validate :discount_is_a_number
      validates_presence_of :purchase_order_lines, message: 'does not exist'
      validate :existing_supplier_cost_price

      def self.valid_csv(batch_file_contents, errors)
        validate_header(batch_file_contents, errors, *self::HEADERS)
      end

      def self.sample_file
        [
          self::HEADERS,
          %w(900211 6),
          %w(900212 10),
        ]
      end

      def process_method
        generate_csv
        create_batch_file
      end

      private

      def generate_csv
        purchase_order_lines.map do |purchase_order_line|
          csv_contents << [
            po_number,
            internal_sku(purchase_order_line.sku_id),
            cost_price(purchase_order_line.supplier_cost_price)
          ]
        end
      end

      def create_batch_file
        BatchFile.create!({
          processor_type_id: processor.id,
          csv_file_name: "#{po_number}_#{DateTime.new.strftime("%m/%d/%Y_%I:%M%p")}.csv",
          csv_content_type: 'text/csv',
          contents: csv_contents,
          description: DESCRIPTION,
          created_by_id: 57
        })
      end

      def processor
        BatchFileProcessor.find_by!(
          processor_type: 'BatchFiles::Processors::UpdatePurchaseOrderCostPriceBySku'
        )
      end

      def csv_contents
        @csv_contents ||= [%w(po sku cost_price)]
      end

      def cost_price(supplier_cost_price)
        supplier_cost_price - (supplier_cost_price * discount)
      end

      def existing_supplier_cost_price
        if purchase_order_lines.pluck(:orderTool_SupplierListPrice).any?(&:blank?)
          errors[:cost_price] = 'There is a missing cost price for the PO'
        end
      end

      def purchase_order_lines
        PurchaseOrderLineItem.where(po_number: po_number)
      end

      def po_number
        contents[0]
      end

      def internal_sku(sku_id)
        Sku.find_by!(id: sku_id).sku
      end

      def discount
        contents[1].to_f.round(2) / 100
      end

      def discount_is_a_number
        errors[:discount] = 'is not a number' unless contents[1].is_a? Numeric
      end
    end
  end
end
